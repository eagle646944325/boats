<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xsi:schemaLocation="
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-4.0.xsd
    http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">

    <!-- 启动注解支持,一句代替下面两个bean注入 -->
    <mvc:annotation-driven/>
    <!-- <bean id="defaultAnnotationHandlerMapping"
          class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping" />
        <bean id="annotationMethodHandlerAdapter"
          class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" /> -->

    <!-- 扫描controller路径（controller层注入） -->
    <context:component-scan base-package="cn.gelk.controller"/>

    <!-- 静态资源，不用被spring DispatcherServlet拦截 -->
    <mvc:resources location="/pages/" mapping="/pages/**"/>
    <mvc:resources location="/resource/" mapping="/resource/**"/>

    <!-- 避免IE在ajax请求时，返回json出现下载 spring 4.x  用  MappingJackson2HttpMessageConverter -->
    <bean id="jacksonMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>apolication/json;charset=UTF-8</value>
                <value>text/html;charset=UTF-8</value>
            </list>
        </property>
    </bean>

    <!-- 对模型视图添加前后缀 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"
        p:viewClass="org.springframework.web.servlet.view.JstlView"
        p:prefix="/WEB-INF/jsp/"
        p:suffix=".jsp"/>

    <!-- 常用的视图解析器说明
      1. AbstractCachingViewResolver：用来缓存视图的抽象视图解析器。通常情况下，视图在使用前就准备好了。
                               继承该解析器就能够使用视图缓存。
      2. XmlViewResolver ：XML视图解析器。它实现了ViewResolver接口，接受相同DTD定义的XML配置文件作为Spring的XML bean工厂。
      3. ResourceBundleViewResolver：它使用了ResourceBundle定义下的bean，实现了ViewResolver接口，指定了绑定包的名称。
                      通常情况下，配置文件会定义在classpath下的properties文件中，默认的文件名字是views.properties。
      4. UrlBasedViewResolver：它简单实现了ViewResolver接口，它不用显式定义，直接影响逻辑视图到URL的映射。
                            它让你不用任何映射就能通过逻辑视图名称访问资源。
      5. InternalResourceViewResolver：国际化视图解析器。
      6. VelocityViewResolver /FreeMarkerViewResolver：Velocity或FreeMarker视图解析器。
      7. ContentNegotiatingViewResolver：内容谈判视图解析器
     -->
    <!-- 根据确定出的不同MIME名，使用不同视图解析器解析视图，比如根据页面上ajax请求参数ContentType，目前常用的就两个(text和json) -->
    <bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
        <property name="mediaTypes">
            <value>
                html=text/html
                json=application/json
            </value>
        </property>
        <!-- 在没有扩展名和参数时,默认的content type -->
        <property name="defaultContentType" value="text/html"/>
        <!-- 是否支持扩展名，默认为true（支持），扩展名指的xxx.json、xxx.xml等形式 -->
        <property name="favorPathExtension" value="true" />
        <!-- 是否启用参数支持，默认为true（支持），即xxx?format=json、xxx?format=xml等形式，这里的参数名默认为format，可以通过配置改变 -->
        <property name="favorParameter" value="true" />
        <!-- 是否忽略accept header，默认是 false（不忽略），即请求时指定的contentType:application/json等，由于我这里要使用扩展名的形式返回，所以把另外两项都关闭了，可视不同情况，使用不同设置 -->
        <property name="ignoreAcceptHeader" value="false" />
    </bean>
    <!--视图协调器,负责根据请求信息从当前环境选择一个最合适的解析器进行解析，它本身并不负责解析视图 -->
    <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
        <!-- 设置这个视图解析器的优先级 -->
        <property name="order" value="1"/>
        <!-- 设置根据请求参数或拓展名映射到相应的MIME类型,
             spring通过反射机制调用ContentNegotiationManagerFactoryBean(该类实现了FactoryBean接口)的 getObject方法获得ContentNegotiationManager对象 -->
        <property name="contentNegotiationManager" ref="contentNegotiationManager"/>
        <!-- 设置默认的候选视图，如果有合适的MIME类型，将优先从以下选择视图 -->
        <property name="defaultViews">
            <list>
                <bean class="com.alibaba.fastjson.support.spring.FastJsonJsonView"/>
            </list>
        </property>
        <!--defaultViews找不到再按下面的视图解析器列表寻找已注册的合适视图 -->
        <property name="viewResolvers">
            <list>
                <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"
                    p:viewClass="org.springframework.web.servlet.view.JstlView"
                    p:prefix="/WEB-INF/jsp/"
                    p:suffix=".jsp"/>
            </list>
        </property>
    </bean>

    <!-- 全局异常处理 -->
    <bean id="exceptionResolver" class="cn.gelk.exception.BizExceptionResolver">
        <property name="defaultStatusCode" value="500" />
        <property name="warnLogCategory" value="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver" />
    </bean>

    <!-- 用于SESSION验证拦截器 -->
    <mvc:interceptors>
        <mvc:interceptor>
            <!-- 需要拦截的URL -->
            <mvc:mapping  path="/**" />
            <mvc:exclude-mapping path="/resource/**"/>
            <bean class="cn.gelk.filter.LoginInterceptor">
                <!-- 不需要拦截验证的URL -->
                <property name="exceptURIs">
                    <list>
                        <value>/pages/index.html</value>
                        <value>/pages/login.html</value>
                        <value>/pages/register.html</value>
                        <value>/pages/timeout.html</value>
                        <value>/pages/errorpage/</value>
                        <value>/sys/login</value>
                        <value>/sys/register</value>
                        <value>/sys/timeout</value>
                        <value>/sys/loginout</value>
                    </list>
                </property>
            </bean>
        </mvc:interceptor>
    </mvc:interceptors>

</beans>