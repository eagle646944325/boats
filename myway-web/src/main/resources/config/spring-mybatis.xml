<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">

    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${jdbc_driverClassName}"/>
        <property name="url" value="${jdbc_url}"/>
        <property name="username" value="${jdbc_username}"/>
        <property name="password" value="${jdbc_password}"/>
        <!-- 初始化连接数 -->
        <property name="initialSize" value="${jdbc_initialSize}"/>
        <!-- 最大连接数 -->
        <property name="maxActive" value="${jdbc_maxActive}"/>
        <!-- 连接池中的最小空闲连接数 -->
        <property name="minIdle" value="${jdbc_minIdle}"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${jdbc_maxWait}"/>
        <!-- 超过时间限制是否回收 根据官方文档此项暂不配置 -->
        <!-- <property name="removeAbandoned" value="true" /> -->
        <!-- 超过时间限制多长 根据官方文档此项暂不配置 -->
        <!-- <property name="removeAbandonedTimeout" value="180" /> -->
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 60000为默认值 ,该项有两个含义：
                1) Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于 minEvictableIdleTimeMillis 则关闭物理连接
                2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!-- 连接保持空闲而不被驱逐的最长时间，单位是毫秒  1000L * 60L * 30L为默认值-->
        <property name="minEvictableIdleTimeMillis" value="300000"/>
        <!-- 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于 timeBetweenEvictionRunsMillis设置的值，执行validationQuery检测连接是否有效。 -->
        <property name="testWhileIdle" value="true"/>
        <!-- 用来检测连接是否有效的sql，要求是一个查询语句。如果 validationQuery 为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。-->
        <property name="validationQuery" value="SELECT 1 FROM DUAL"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
        <!-- 属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：监控统计用的filter:stat;日志用的filter:log4j;防御sql注入的filter:wall-->
        <property name="filters" value="stat,wall"/>
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 ,如果数据库为mysql建议关闭
        <property name="poolPreparedStatements" value="true" />
        <property name="maxOpenPreparedStatements" value="20" / >  -->
    </bean>

    <!-- mybatis的配置文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <!-- 如果配置成classpath*:mapper/*.xml：则查找路径不仅包含class路径，还包括jar文件中的class路径 -->
        <property name="mapperLocations" value="classpath:mapper/*.xml" />
        <property name="typeAliasesPackage" value="cn.gelk.domain" />
        <property name="typeAliasesSuperType" value="cn.gelk.domain.base.BaseDomain" />
        <property name="plugins">
            <array>
                <!-- <ref bean="paginationInterceptor" /> -->
                <bean class="com.github.pagehelper.PageInterceptor">
                    <!-- 这里的几个配置主要演示如何使用，如果不理解，一定要去掉下面的配置 -->
                    <property name="properties">
                        <value>
                            helperDialect=mysql<!-- 分页插件会自动检测当前的数据库链接，自动选择合适的分页方式。 你可以配置helperDialect属性来指定分页插件使用哪种方言。配置时，可以使用下面的缩写值： -->
                            reasonable=true <!-- 分页合理化参数，默认值为false。当该参数设置为 true 时，pageNum<=0 时会查询第一页 pageNum>pages（超过总数时），会查询最后一页 -->
                            supportMethodsArguments=false <!-- 支持通过 Mapper 接口参数来传递分页参数，默认值 false，分页插件会从查询方法的参数值中，自动根据上面 params 配置的字段中取值，查找到合适的值时就会自动分页-->
                            autoRuntimeDialect=false <!-- 默认值为 false。设置为 true 时，允许在运行时根据多数据源自动识别对应方言的分页 -->
                        </value>
                    </property>
                </bean>
            </array>
        </property>
    </bean>
    <!-- 通用mapper配置方式，spring与mybatis整合配置，扫描所有dao -->
    <!-- 通用mapper参考 https://mapperhelper.github.io/docs/ -->
    <bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 为映射器接口文件设置扫描的基本包路径 -->
        <property name="basePackage" value="cn.gelk.dao" />
        <!-- markerInterface 属性指定了根据父接口扫描mapper接口，这个主要用于适应场景适合 "通用mapper" 的mapper接口 -->
        <property name="markerInterface" value="cn.gelk.markerInterface.MyBatisMapper" />
        <!-- annotationClass 属性指定了根据注解名称扫描mapper接口，这个考虑"通用mapper"不能适应的场景，
             比如关联多表查询，需要自己手写xml和mapper接口，该注解用在手写的mapper接口上 -->
        <property name="annotationClass" value="cn.gelk.annotationClass.MybatisMapper"/>
        <!-- 如果只有一个数据源则下面的sqlSessionFactoryBeanName属性值 -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>

    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- 注解模式事务 -->
    <tx:annotation-driven transaction-manager="transactionManager" />
    <!-- AOP注入式事务 -->
    <aop:config>
        <aop:pointcut id="txPointcut" expression="execution(* cn.gelk.service.*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
    </aop:config>
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- 方法名称符合增、删、改的进行事务控制，事务隔离级别为提交读模式，方法内发生Exception就回滚事务 -->
            <tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.Exception" isolation="READ_COMMITTED"/>
            <tx:method name="add*" propagation="REQUIRED" rollback-for="java.lang.Exception" isolation="READ_COMMITTED"/>
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Exception" isolation="READ_COMMITTED"/>
            <tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Exception" isolation="READ_COMMITTED"/>
            <!-- 其他的没有指定的方法全部采用只读型数据库连接进行查询操作 -->
            <tx:method name="*" propagation="SUPPORTS" read-only="true"/>
        </tx:attributes>
    </tx:advice>
</beans>