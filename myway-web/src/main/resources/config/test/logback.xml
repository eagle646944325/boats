<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="30 seconds">
	<!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径 -->
	<property name="LOG_HOME" value="${web.root}/logs" />
	<!-- 控制台输出 -->
	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
		<!-- 求值过滤器（EvaluatorFilter）
			 FilterReply.DENY, 直接退出，不执行后续流程
			 FilterReply.NEUTRA，继续向下执行
			 FilterReply.ACCEPT，不进行步骤二,即类型输出类型检查 -->
		<filter class="ch.qos.logback.core.filter.EvaluatorFilter">
		    <evaluator>
		        <expression>
		        	return logger.contains("ClientCnxn") 
		        		|| logger.contains("SqlSessionUtils") 
		        		|| logger.contains("SpringManagedTransaction") 
		        		|| logger.contains("driver.cluster") 
		        		|| logger.contains("RedisConnection") 
		        		|| logger.contains("Redis Connection")
		        		|| logger.contains("CglibAopProxy");
		        </expression>
		    </evaluator>
		    <onMatch>DENY</onMatch>
		    <onMismatch>NEUTRA</onMismatch>
		</filter>
		<!-- 日志输出编码 -->
		<Encoding>UTF-8</Encoding>
		<layout class="ch.qos.logback.classic.PatternLayout">
			<!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符 -->
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{20} - %msg%n</pattern>
		</layout>
	</appender>
	<!-- 按照每天生成日志文件 -->
	<appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 求值过滤器（EvaluatorFilter） -->
		<filter class="ch.qos.logback.core.filter.EvaluatorFilter">
		    <evaluator>
		        <expression>
		        	return logger.contains("ClientCnxn") 
		        		|| logger.contains("SqlSessionUtils") 
		        		|| logger.contains("SpringManagedTransaction") 
		        		|| logger.contains("driver.cluster") 
		        		|| logger.contains("RedisConnection") 
		        		|| logger.contains("Redis Connection")
		        		|| logger.contains("CglibAopProxy");
		        </expression>
		    </evaluator>
		    <onMatch>DENY</onMatch>
		    <onMismatch>NEUTRA</onMismatch>
		</filter>
		<Encoding>UTF-8</Encoding>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!--日志文件输出的文件名 -->
			<FileNamePattern>${LOG_HOME}/myway_test_web.%d{yyyy-MM-dd}.zip</FileNamePattern>
			<MaxHistory>7</MaxHistory>
		</rollingPolicy>
		<layout class="ch.qos.logback.classic.PatternLayout">
			<!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符 -->
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{20} - %msg%n</pattern>
		</layout>
	</appender>

     <!-- 异步输出 -->  
     <!-- AsyncAppender并不处理日志，只是将日志缓冲到一个BlockingQueue里面去，并在内部创建一个工作线程从队列头部获取日志，
          之后将获取的日志循环记录到附加的其他appender上去，从而达到不阻塞主线程的效果。因此AsynAppender仅仅充当事件转发器，
          必须引用另一个appender来做事 -->
     <appender name ="ASYNC_FILE" class= "ch.qos.logback.classic.AsyncAppender">  
            <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->  
            <discardingThreshold >0</discardingThreshold>  
            <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->  
            <queueSize>512</queueSize>  
            <!-- 添加附加的appender,最多只能添加一个 -->  
         <appender-ref ref ="FILE"/>  
     </appender>
     <appender name ="ASYNC_STDOUT" class= "ch.qos.logback.classic.AsyncAppender">  
            <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->  
            <discardingThreshold >0</discardingThreshold>  
            <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->  
            <queueSize>512</queueSize>  
            <!-- 添加附加的appender,最多只能添加一个 -->  
         <appender-ref ref ="STDOUT"/>  
     </appender>

	<!-- 指定某些类对象的输出日志级别 -->
	<logger name="com.google.code" level="INFO">
		<appender-ref ref="ASYNC_STDOUT"/>
		<appender-ref ref="ASYNC_FILE"/>
	</logger>
	<logger name="net" level="INFO">
		<appender-ref ref="ASYNC_STDOUT"/>
		<appender-ref ref="ASYNC_FILE"/>
	</logger>
	<logger name="org.quartz.core" level="INFO" >
		<appender-ref ref="ASYNC_STDOUT"/>
		<appender-ref ref="ASYNC_FILE"/>
	</logger>
	
	<!-- 日志输出级别 -->
	<root level="INFO">
		<appender-ref ref="ASYNC_STDOUT" />
		<appender-ref ref="ASYNC_FILE" />
	</root>
</configuration>